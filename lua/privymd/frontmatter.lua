local log = require("privymd.utils.logger")

local M = {}

---------------------------------------------------------------------
-- üîç R√©cup√®re le destinataire GPG depuis le front-matter YAML
---------------------------------------------------------------------
function M.get_file_recipient()
	log.trace("Looking for recipient‚Ä¶")
	-- On lit les 100 premi√®res lignes (suffisant pour tout front-matter)
	local lines = vim.api.nvim_buf_get_lines(0, 0, 100, false)
	local in_front_matter = false
	local recipient = nil

	for _, line in ipairs(lines) do
		-- d√©tecte le bloc YAML (---) avec tol√©rance d'espaces
		if line:match("^%s*%-%-%-%s*$") then
			in_front_matter = not in_front_matter
			if not in_front_matter then
				break -- fin du header YAML
			end
		elseif in_front_matter then
			-- d√©tecte la cl√© gpg-recipient
			local value = line:match("^%s*gpg%-recipient:%s*(.-)%s*$")
			if value and value ~= "" then
				recipient = value
			end
		end
	end

	if not recipient then
		log.warn("‚ö†Ô∏è Aucun gpg-recipient trouv√© dans le front-matter.")
		return nil
	end

	log.trace("Recipient found.")
	return recipient
end

---------------------------------------------------------------------
-- üß™ (Optionnel) r√©cup√©rer toutes les m√©tadonn√©es YAML
-- Utile si tu veux √©tendre la logique plus tard
---------------------------------------------------------------------
function M.get_all_metadata()
	local lines = vim.api.nvim_buf_get_lines(0, 0, 100, false)
	local in_front_matter = false
	local meta = {}

	for _, line in ipairs(lines) do
		if line:match("^%s*%-%-%-%s*$") then
			in_front_matter = not in_front_matter
			if not in_front_matter then
				break
			end
		elseif in_front_matter then
			local key, value = line:match("^%s*([%w%-%_]+):%s*(.-)%s*$")
			if key and value then
				meta[key] = value
			end
		end
	end

	return meta
end

return M
